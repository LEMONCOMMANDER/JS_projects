I left a lot of code in this for learning purposes - it is messier but can be referenced for some excellent insights that I 
earned while buildint this project.

NOTE 1  - the original design used user input for number box 1 and 2.
some of the commented code is in reference to this - namely anything that ends in .value. This retrieves input from an object
where as .textContent retrieves just the text from an object that a user can't interact with (like a <p>  or <span> tag).

the isNaN function evaluates if the argument is a number object - this was relevant when a user could input something that
was NOT a number. This was in place to check if that was the case and then convert the non number to a 0. This became 
unneccesary as the user input went away.

--------------------------------------------------- break ---------------------------------------------------

NOTE 2 - the use of newstr vs referencing number_X.textContent:
in input_numbers and del functions, I use a similar strategy to effect the string at a specific index (called splitter).
in the del function, I am actually manipulating arrays, whereas in the input_numbers function, I am manipulating strings.

*** I left it both ways to illustrate the difference - important to understand, array manipulation is more complex but has a 
wider range of uses. Say you want to filter out specific letters or do more complicated types of manipulation, working in 
an array offers this opportunity. String manipulation is a lot simplier and there are several string specific types of 
methods that exist such as substring, splice, toUpperCase, etc. ***

the reason there are differences between the two functions is because of what I call the slice method on:

in the input_numbers function, I originally defined newstr as number_X.textContent.split(""); 
Split here takes the string and turns it into an array. This is the same in the del function but the difference is what 
happens next:

starting with the del function - my next line reassigns newstr to:
        newstr = newstr.slice(0, splitter - 1).concat(newstr.slice(splitter)).join('');
notice how slice is applied to newstr, which was previously turned into an ARRAY by the split method.

in the input_numbers function,  my second line is actually:
        newstr = number_2.textContent.slice(0, splitter).concat(button_number, number_2.textContent.slice(splitter));
notice how slice is applied to number_2.textContent - which is a string

this is the reason that input_numbers function does NOT need the join method - it is all a string already. 

--------------------------------------------------- break ---------------------------------------------------

NOTE 3 - resize:

The first function is a window object event listener that watches for window resize. If the window falls below a certain 
height or width, it will make a scroll bar visible to handle overflow. This idea came from GPT - the original goal was to
resize the window to a certain dimension if either H or W fell below a certain point - but research indicated that resize
tended to be blocked by the browser unless the window was opened new from the code itself (window.open() I believe).

I think this blockage extends beyond resize and seems to limit certain code interactions with the browser for security 
purposes, but I need to do more research beyond the scope of this project.

Instead, I landed at the solution in the code - this window.object can use innerHeight / innerWidth as they are objects
of the window itself. 

getp -  I try a similar thing with the result display - but I learned that there are different methods to use since this 
is not a window object (therefor innerHeight / innerWidth won't work.) In researching + GPT, I learned about 
[ offsetWidth | offsetHeight ] and [ clientWidth | clientHeight ]. 

The main differences between these are the size of an object including content, padding, border, and scrollbars.
offset accounts for all of this and client accounts for conent and padding ONLY.

--------------------------------------------------- break ---------------------------------------------------
